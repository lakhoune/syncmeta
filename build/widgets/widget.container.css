/* 
    Default styles for jsPlumb Toolkit

    Copyright 2020 https://jsplumbtoolkit.com
*/

/* --------------------------------------------------------------------------------------------- */
/* --- SURFACE WIDGET -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------------------------- */

/*
    Assigned to SVG elements for edges. This style allows overlays to paint outside the bounds, and
    for arbitrary stroke widths for connectors.
 */
.jtk-connector {
    overflow:visible;
}

/*
    Assigned to every Node managed by an instance of the Toolkit. They are required to be positioned absolute, to
    enable dragging to work properly.
*/
.jtk-node {
    position: absolute;
}

/*
    Assigned to every Group managed by an instance of the Toolkit. They are required to be positioned absolute, to
    enable dragging to work properly. We set overflow:visible on Group elements too, as a drag outside of the bounds
    is automatically reverted anyway, and without overflow:visible you cannot drag a node to some other element. You can
    also drag a node out of the element's viewport and if you drop it you can never get it back.
*/
.jtk-group {
    position: absolute;
    overflow: visible;
}

/*
    Default behaviour for children of a collapsed group - hide them.
 */
[data-jtk-group].jtk-group-collapsed [data-jtk-managed] {
    display:none;
}

/*

    This is the attribute used to mark which part of a Group DOM element should contain the child Nodes. We mark it
    as having `position:relative` so that the absolute positioned Nodes are drawn correctly.
*/
[data-jtk-group-content] {
    position:relative;
}

/*
    This style was created in response to this Chrome bug:
    http://stackoverflow.com/questions/13758215/artifacts-when-css-scaled-in-chrome

    Basically it's about how sometimes there can be artefacts left on screen when the user drags an element. It seems
    the issue has been fixed in more recent versions of Chrome, but the style is left here in case you come across
    the problem.
*/
.jtk-node.jtk-drag {
    /*-webkit-backface-visibility: hidden;*/
}

/*
    Suppresses the pointer events on an element that was created by Katavorio in response to a drag in which the element
    should first be cloned. Having this clone ignore pointer events means there is less chance that any other
    mouse activity (such as click) on the original element will not be consumed by katavorio.
 */
.katavorio-clone-drag {
    pointer-events:none;
}

/*
    Assigned to an element that is the `Container` in a `render` call.
    Elements that are acting as Surface widgets should have overflow:hidden set to prevent libs from
    scrolling them during drag (we don't want scrollbars; we have an infinite canvas). Position is set to
    `relative` as this is the parent for nodes, which are positioned absolute (and for absolute positioning
    to work, you need to ensure the parent node has `position:relative`). This style also sets some default
    values for the cursor - using a `grab` cursor where supported.
*/
.jtk-surface {
    overflow: hidden !important;
    position: relative;
    cursor: move;
    cursor: -moz-grab;
    cursor: -webkit-grab;

    /*
        For IE10+. As discussed on this page:

        https://msdn.microsoft.com/en-us/library/ie/jj583807(v=vs.85).aspx

        Microsoft have very helpfully implemented default behaviours for a bunch of touch events and
        then consumed the events so you don't have to be bothered by them. They've "done a lot of research"
        about this stuff and put together a really great default experience for everyone in the entire world.
    */
    touch-action:none;

    /*
        Another Chrome issue that appears to have been fixed in later versions
        http://stackoverflow.com/questions/15464055/css-transition-effect-makes-image-blurry-moves-image-1px-in-chrome
    */
    /*
    -webkit-backface-visibility: hidden;
    -webkit-transform: translateZ(0) scale(1.0, 1.0);
    */
}

/**
* Assigned to a Surface element when direct rendering is switched on - no pan or zoom, the underlying canvas scaled to fit its contents at zoom:1.
 */
.jtk-surface-direct-render {
    overflow:hidden !important;
}

/*
    Assigned to the surface when it is being panned. The default is to change the cursor (in browsers that support
    a `grabbing` cursor), and to disable text selection.
*/
.jtk-surface-panning {
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/*
    The work area in a surface renderer.
*/
.jtk-surface-canvas {
    overflow: visible !important;
}

/*
    For IE10+. Discussed above in the .jtk-surface styles. This one is specific to elements that are configured
    to be droppable on a Surface via its `registerDroppableNodes` method.
*/
.jtk-surface-droppable-node {
    touch-action:none;
}

/*
    Assigned to a Surface widget when panning is disabled (and therefore the app is relying on scrollbars when the content overflows).
*/
.jtk-surface-nopan {
    overflow: scroll !important;
    cursor:default;
}

/*
Assigned to tile images in a tiled background
*/
.jtk-surface-tile {
    border:none;
    outline:none;
    margin:0;
    -webkit-transition: opacity .3s ease .15s;
    -moz-transition: opacity .3s ease .15s;
    -o-transition: opacity .3s ease .15s;
    -ms-transition: opacity .3s ease .15s;
    transition: opacity .3s ease .15s;
}

/*
    Assigned to the element used for node select with the mouse ("lasso").
*/
.jtk-lasso {
    border: 2px solid rgb(49, 119, 184);
    background-color: WhiteSmoke;
    opacity: 0.5;
    display: none;
    z-index: 20000;
    position: absolute;
}

/*
    This class is added to the document body on lasso drag start and removed at the end of lasso dragging. Its purpose
    is to switch off text selection on all elements while the user is dragging the lasso.
*/
.jtk-lasso-select-defeat * {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/**
    Added to the lasso mask when it is operating in 'inverted' mode, ie. the excluded parts of the UI are covered, rather
    than the normal mode in which the selected parts of the UI are covered.
*/
.jtk-lasso-mask {
    position:fixed;
    z-index:20000;
    display:none;
    opacity:0.5;
    background-color: #07234E;
    top:0;
    bottom:0;
    left:0;
    right:0;
}

/*
    Assigned to some element that has been selected (either via lasso or programmatically).
*/
.jtk-surface-selected-element {
    border: 2px dotted #c7726c !important;
}

/*
    Assigned to all pan buttons in a surface widget.
*/
.jtk-surface-pan {
    background-color: Azure;
    opacity: 0.4;
    text-align: center;
    cursor: pointer;
    z-index: 2;
    -webkit-transition: background-color 0.15s ease-in;
    -moz-transition: background-color 0.15s ease-in;
    -o-transition: background-color 0.15s ease-in;
    transition: background-color 0.15s ease-in;
}

/*
    Specific styles for the top and bottom pan buttons.
    Top/bottom are 100% width and 20px high by default
*/
.jtk-surface-pan-top, .jtk-surface-pan-bottom {
    width: 100%;
    height: 20px;
    display: flex;
    justify-content: center;
}

/*
    Hover styles for all pan buttons.
    On hover, change color, background color, font weight and opacity.
*/
.jtk-surface-pan-top:hover, .jtk-surface-pan-bottom:hover, .jtk-surface-pan-left:hover, .jtk-surface-pan-right:hover {
    opacity: 0.6;
    background-color: rgb(49, 119, 184);
    color: white;
    font-weight: bold;
}

/*
    Specific styles for the left and right pan buttons.
    Left/right pan buttons are 100% height and 20px wide
*/
.jtk-surface-pan-left, .jtk-surface-pan-right {
    width: 20px;
    height: 100%;
    display: flex;
    align-items: center;
}


/*
    Assigned to a pan button when the user is pressing it.
*/
.jtk-surface-pan-active, .jtk-surface-pan-active:hover {
    background-color: #f76258;
}

/* --------------------------------------------------------------------------------------------- */
/* --- MINIVIEW WIDGET ------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------------------------- */

/*
    Assigned to an element that is acting as a Miniview.
    As with Surface, Miniview elements should have overflow:hidden set to prevent
    libs from scrolling them during drag. This style also provides a default width/height for a miniview,
    which you may wish to override.
*/
.jtk-miniview {
    overflow: hidden !important;
    width: 125px;
    height: 125px;
    position: relative;
    background-color: transparent;
    border: 2px solid #d4d8dc;
    border-radius: 4px;
    opacity: 0.8;
}

/*
    Assigned to the element that shows the size of the related viewport in a Miniview widget, and which can be dragged to
    move the surface.
*/
.jtk-miniview-panner {
    border: 5px dotted WhiteSmoke;
    opacity: 0.4;
    background-color: rgb(79, 111, 126);
    cursor: move;
    cursor: -moz-grab;
    cursor: -webkit-grab;
}

/*
    Assigned to the miniview's panner when it is being dragged.
*/
.jtk-miniview-panning {
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
}

/*
    Added to all elements displayed in a miniview.
*/
.jtk-miniview-element {
    background-color: rgb(96, 122, 134);
    position: absolute;
}

/*
    Added to Group elements displayed in a miniview
*/
.jtk-miniview-group-element {
    background: transparent;
    border: 3px solid black;
}

/*
    Assigned to the collapse/expand miniview button
*/
.jtk-miniview-collapse {
    color: whiteSmoke;
    position: absolute;
    font-size: 18px;
    top: -1px;
    right: 3px;
    cursor: pointer;
    font-weight: bold;
}

/*
    The '-' symbol when the miniview is expanded
*/
.jtk-miniview-collapse:before {
    content: "\2012";
}

/*
    Assigned to the miniview element when it is collapsed.
*/
.jtk-miniview-collapsed {
    background-color: #449ea6;
    border-radius: 4px;
    height: 22px;
    margin-right: 0;
    padding: 4px;
    width: 21px;
}

/*
    Hide all children of the miniview (except the expand button) when it is collapsed so you don't see anything
    poking through under the + icon.
*/
.jtk-miniview-collapsed .jtk-miniview-element, .jtk-miniview-collapsed .jtk-miniview-panner {
    visibility: hidden;
}

/*
    The '+' symbol when the miniview is collapsed.
*/
.jtk-miniview-collapsed .jtk-miniview-collapse:before {
    content: "+";
}

/*
    Hover state for the collapse/expand icon.
*/
.jtk-miniview-collapse:hover {
    color: #E4F013;
}

/* -------------------------------------------------------------------------------------------- */
/* --- DRAWING TOOLS -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------------------------- */

/*
    Assigned to the element that is drawn around some other element when a drawing operation is taking place.
*/
.jtk-draw-skeleton {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    outline: 2px solid #84acb3;
    opacity: 0.8;
}

/*
    Assigned to every handle (top left, top right, bottom left, bottom right, center) in a draw skeleton.
*/
.jtk-draw-handle {
    position: absolute;
    width: 7px;
    height: 7px;
    background-color: #84acb3;
}

/*
    Assigned to the top left handle in a draw skeleton
*/
.jtk-draw-handle-tl {
    left: 0;
    top: 0;
    cursor: nw-resize;
}

/*
    Assigned to the top right handle in a draw skeleton
*/
.jtk-draw-handle-tr {
    right: 0;
    top: 0;
    cursor: ne-resize;
}

/*
    Assigned to the bottom left handle in a draw skeleton
*/
.jtk-draw-handle-bl {
    left: 0;
    bottom: 0;
    cursor: sw-resize;
}

/*
    Assigned to the bottom right handle in a draw skeleton
*/
.jtk-draw-handle-br {
    bottom: 0;
    right: 0;
    cursor: se-resize;
}

/*
    Assigned to the center handle in a draw skeleton (the handle by which the element may be dragged). This is
    not visible by defaut; enable if you need it.
*/
.jtk-draw-drag {
    display:none;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -10px;
    margin-top: -10px;
    width: 20px;
    height: 20px;
    background-color: #84acb3;
    cursor: move;
}

/*
    This class is added to the document body on drag resize start and removed at the end of resizing. Its purpose
    is to switch off text selection on all elements while the user is resizing an element.
*/
.jtk-drag-select-defeat * {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.ui-resizable {
    /*jquery-ui adds this class to resizable objects. 
          However, the jsplumb library requires the position to be absolute, otherwise 
          offsets will be wrong. So we need to override this here.
          see https://github.com/rwth-acis/syncmeta/issues/86
          */
    position: absolute !important;
}

.button_bar {
    width: 50%;
    float: left;
    display: flex;
    flex-wrap: wrap;
}

.main-container {
    position: relative;
}

.button_bar.left {
    text-align: left;
}

.button_bar.right {
    text-align: right;
}

.node {
    z-index: 1;
    position: absolute;
    overflow: visible;
    border: 2px solid transparent;
}

.trace_awareness {
    z-index: 0;
    position: absolute;
    overflow: visible;
    opacity: 0;
    pointer-events: none;
}

div.class_node {
    height: inherit;
    width: inherit;
    border: 1px solid #aaa;
    border-radius: 1px;
    box-shadow: 2px 2px 2px #cccccc;
    color: #666 !important;
    font-size: 12px;
}

div.default_node {
    height: inherit;
    width: inherit;
}

div.custom_node {
    height: 100%;
    width: 100%;
    position: relative;
}

div.custom_node .fill_parent {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: inherit;
    height: inherit;
}

/*adjust label of custom nodes*/
div.custom_node .fill_parent>div {
    left: 50%;
    top: -8px !important;
    -webkit-transform: translateY(-50%) translateX(-50%);
    -moz-transform: translateY(-50%) translateX(-50%);
    transform: translateY(-50%) translateX(-50%);
    pointer-events: none;
    overflow-x: auto;
}

div.simple_node {
    height: inherit;
    width: inherit;
    display: table;
}

.center .single_value_attribute .name {
    display: none;
}

.center .single_value_attribute .value .val {
    text-align: center;
}

div.simple_node div.label {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}

.box-overlay {
    position: absolute;
    background-color: #bbbbbb;
    opacity: 0;
    border-radius: 10px;
    cursor: move;
}

.selected {
    border: 3px solid #2bff6e;
}

#canvas-frame {
    overflow: hidden;
    width: 100%;
    height: 100%;
    position: relative;
    background-color: #afafaf;
}

#canvas {
    width: 100%;
    height: 100%;
    max-width: none !important;
    max-height: none !important;
    border-radius: 6px;
    position: relative !important;
    /*important because jsplumb will position according to this*/
    background-image: url(../images/grid.png);
    background-repeat: round;
    opacity: 1 !important;
    border-radius: 20px;
        border: 10px solid #000000;
}

#canvas.tool-move {
    cursor: move !important;
}

#canvas.tool-move ._jsPlumb_connector {
    cursor: pointer !important;
}

#canvas.tool-node {
    cursor: pointer !important;
}

#canvas.tool-edge {
    cursor: default !important;
}

#canvas.tool-edge.dragging {
    cursor: move !important;
}

#canvas.tool-edge .node,
#canvas.tool-node .node {
    opacity: 1;
}

#canvas.tool-edge .node {
    cursor: pointer !important;
}

#canvas.tool-edge.dragging .node {
    cursor: move !important;
}

#feedback {
    margin: 10px;
    color: #777777;
}

button[disabled="disabled"],
button:disabled {
    opacity: 0.5;
}

._jsPlumb_overlay {
    font-size: 12px;
}

.class_node,
.edge_shape_node,
.node_shape_node,
.enum_node,
.abstract_class_node,
.object_node,
.relation_node {
    overflow: hidden;
}

.class_node .label,
.edge_shape_node .label,
.node_shape_node .label,
.enum_node .label,
.abstract_class_node .label,
.object_node .label,
.relation_node .label {
    border-bottom: 1px solid #999999;
}

.edge_label .single_value_attribute .name,
.label .single_value_attribute .name,
.title .single_value_attribute .name,
.name .single_value_attribute .name {
    display: none;
}

.class_node .label,
.edge_shape_node .label,
.node_shape_node .label,
.enum_node .label,
.abstract_class_node .label,
.object_node .label,
.relation_node .label {
    text-align: center;
    font-weight: bold;
    display: block;
}

.value input {
    border: 0;
    background: none;
    outline: none;
}

.edge_label {
    width: 200px;
    cursor: pointer;
}

.edge_label.fixed {
    background-color: #f5f5f5;
    width: auto;
    font-size: 14px;
}

.edge_label .single_value_attribute .value input,
.label .single_value_attribute .value input,
.title .single_value_attribute .value input,
.name .single_value_attribute .value input {
    border: 0;
    background: none;
    width: 100%;
    text-align: center;
    font-weight: bold;
    outline: none;
    margin: 2px auto;
    display: block;
}

.edge_label .single_value_attribute .value div.val {
    text-align: center;
}

.attributes .list_attribute .name {
    display: none;
}

.attributes .list_attribute ul.list {
    padding: 2px;
    margin: 0;
    list-style: none;
}

.attributes .list_attribute ul.list li.key_value_attribute,
.attributes .list_attribute ul.list li.condition_predicate,
.attributes .list_attribute ul.list li.renaming_attr {
    overflow: hidden;
}

.attributes .list_attribute ul.list li.key_value_attribute div.key {
    float: left;
    width: 50%;
}

.attributes .list_attribute ul.list li.key_value_attribute div.value {
    float: left;
    width: 50%;
}

.attributes .list_attribute ul.list li.condition_predicate div.property,
.attributes .list_attribute ul.list li.condition_predicate div.operator,
.attributes .list_attribute ul.list li.condition_predicate div.val,
.attributes .list_attribute ul.list li.condition_predicate div.operator2 {
    float: left;
    margin-left: 3px;
}

.attributes .list_attribute ul.list li.renaming_attr div.val,
.attributes .list_attribute ul.list li.renaming_attr div.ref {
    float: left;
    margin-left: 3px;
    width: 50%;
}

.attributes .list_attribute ul.list li.renaming_attr div.vis {
    float: right;
    margin-left: 3px;
}

.attributes .list_attribute ul.list li.key_value_attribute div.key input,
.attributes .list_attribute ul.list li.key_value_attribute div.value input,
.attributes .list_attribute ul.list li.condition_predicate div.val input,
.attributes .list_attribute ul.list li.renaming_attr div.val input,
.attributes .list_attribute ul.list li.renaming_attr div.ref input {
    width: 100%;
    border: 0;
    outline: none;
    background: none;
}

.attributes .single_value_attribute {
    overflow: hidden;
    margin-left: 1px;
}

.attributes .single_value_attribute .name {
    width: 50%;
    float: left;
    margin: 3px 0;
}

.attributes .single_value_attribute .value {
    width: 50%;
    float: left;
}

.attributes .single_value_attribute .value input {
    border: 0;
    color: #666 !important;
    margin: 0;
    background: none;
}

.attributes .value div.val {
    text-align: right;
    margin: 3px;
}

.attributes .value input.val {
    text-align: right;
    float: right;
}

.size-preview {
    z-index: 99;
    background-color: #ffffff;
    color: #666666;
    position: absolute;
    top: 0;
    left: 0;
    border: 1px dashed black;
}

#canvas.tool-edge .node.lowlighted,
#canvas.tool-edge .node.target {
    opacity: 0.5;
}

#canvas.tool-edge .node.source {
    opacity: 1;
}

#canvas.tool-edge.dragging .node.source {
    opacity: 0.5;
}

#canvas.tool-edge.dragging .node.source.current,
#canvas.tool-edge.dragging .node.target {
    opacity: 1;
}

#canvas.tool-edge ._jsPlumb_connector {
    opacity: 0.5;
}

#canvas.tool-edge ._jsPlumb_connector._jsPlumb_dragging {
    opacity: 1;
}

/*noinspection CssUnknownProperty*/
.type {
    position: absolute;
    bottom: 105%;
    left: 50%;
    transform: translateX(-50%);
    -o-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    text-align: center;
    overflow: visible;
    white-space: nowrap;
    color: #aaaaaa;
    font-size: 0.9em;
}

#canvas.hide_type .type {
    display: none;
}

#viewsHide {
    display: none;
}

#lblCurrentView {
    display: none;
}

.user_highlight {
    position: absolute;
    top: 100%;
    left: 0;
    font-size: 12px;
    font-weight: bold;
    white-space: nowrap;
    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
}

.jtk-endpoint {
    z-index: 300000;
}

.ghost-edge {
    opacity: 0.3;
    z-index: 30000;
}

.ghost-edge-overlay {
    z-index: 31000;
}

/* VML colors */
.object {
    background-color: rgb(213, 235, 253);
}

.nodeshape {
    background-color: rgba(213, 235, 253, 0.5);
}

.enum {
    background-color: #f9ffc6;
}

.relationship {
    background-color: #ffcece;
}

.edgeshape {
    background-color: rgba(255, 206, 206, 0.5);
}

.relation {
    background-color: #d5f5d5;
}

.abstractclass {
    background-color: #ffffff;
}

.main-container {
    position: relative;
}